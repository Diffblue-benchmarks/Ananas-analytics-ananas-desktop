
def String getSystemProperty(String propertyName, String defaultValue)
{
	String value = System.properties[propertyName]
	if (value != null) {
		return value
	}
	return defaultValue
}

// println getSystemProperty("NODE_ENV", "development")

// clean the runner binary folder
task cleanRunnerBinary(type: Delete) {
	delete 'resources/runner'
}



task install(type: Exec) {
	workingDir "."

	inputs.file("package.json").withPathSensitivity(PathSensitivity.RELATIVE)

	outputs.dir("node_modules")
	outputs.cacheIf { true }

	commandLine "yarn", "install"
}

task buildRender(type: Exec) { 
	dependsOn install	

	workingDir "."
	
	inputs.property 'NODE_ENV', getSystemProperty('NODE_ENV', 'development')
	inputs.dir("src/common").withPathSensitivity(PathSensitivity.RELATIVE)
	inputs.dir("src/ui").withPathSensitivity(PathSensitivity.RELATIVE)
	inputs.dir("public").withPathSensitivity(PathSensitivity.RELATIVE)

	outputs.file("dist/bundle.js")
	outputs.cacheIf { true }

	environment "NODE_ENV", "${getSystemProperty('NODE_ENV', 'development')}"

	commandLine "./node_modules/.bin/webpack", "--mode", "${getSystemProperty('NODE_ENV', 'development')}"
}

task buildMain(type: Exec) {
	dependsOn install	

	inputs.property 'NODE_ENV', getSystemProperty('NODE_ENV', 'development')
	inputs.file("main.js").withPathSensitivity(PathSensitivity.RELATIVE)
	inputs.dir("src/common").withPathSensitivity(PathSensitivity.RELATIVE)
	inputs.dir("src/main").withPathSensitivity(PathSensitivity.RELATIVE)

	outputs.file("dist/app.js")
	outputs.cacheIf { true }

	workingDir "."

	environment "NODE_ENV", "${getSystemProperty('NODE_ENV', 'development')}"

	commandLine "./node_modules/.bin/webpack", "--config",  "webpack.main.config.js", "--mode", "${getSystemProperty('NODE_ENV', 'development')}" 
}

task build {
	dependsOn buildRender, buildMain
}

task test(type: Exec) {
	commandLine "./node_modules/.bin/jest"
}

task run(type: Exec) {
	dependsOn build

	workingDir "."

	commandLine "./node_modules/.bin/electron", "."
}
